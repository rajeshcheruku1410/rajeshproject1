Servlet life cycle methods
==========================
We have three life cycle methods in servlet.


1) public void init(ServletConfig config)throws ServletException
-----------------------------------
	> It is used for instantiation event.
	> This method will execute just before servlet object creation.


2) public void service(ServletRequest req,ServletResponse res)throws ServletException,IOException 
------------------------------------
	> It is a request arrival event.
	> This method will execute when request goes to servlet.

3) public void destroy() 
---------------------
	> it is used for destruction event.
	> This method will execute just before servlet object destruction.

Diagram: servlet5.1


Deployment Directory Structure
--------------------------------
LifeCycleApp
|
|---Java Resources
|	|
	|------src
		|
		|---com.ihub.www
			|
			|---TestSrv.java
|---WebContent
|	|
	|------index.html 
	|
	|------WEB-INF		
		|
		|---web.xml
Note:
---
In above application we need to add "servlet-api.jar" file in project build path.

index.html
----------

<center>
	<h1>
		<a href="test"> Click Here </a>
	</h1>
</center>

web.xml
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>TestSrv</servlet-name>
  	<servlet-class>com.ihub.www.TestSrv</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>TestSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  <welcome-file-list>
  	<welcome-file>index.html</welcome-file>
  </welcome-file-list>
  
</web-app>

TestSrv.java
-------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServlet;

public class TestSrv extends HttpServlet 
{
	public void init(ServletConfig config)throws ServletException
	{
		
	}
	public void service(ServletRequest req,ServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		pw.println("<center><h1>This is service method</h1></center>");
		
		pw.close();
	}
	public void destroy()
	{
		
	}
}

Request url
-----------
	http://localhost:2525/LifeCycleApp/



Form validation 
==================
The process of checking format and pattern of form data is called form validation and such logic is called form validation logic.

We can write form validation at client side as well as server side but performs server side form validation when client side form validation is not done.

Deployment Directory Structure
-----------------------------
ValidationApp
|
|---Java Resources
|	|
	|------src
		|
		|---com.ihub.www
			|
			|---FormSrv.java
|---WebContent
|	|
	|------form.html 
	|------validation.js
	|
	|------WEB-INF		
		|
		|---web.xml
Note:
---
In above application we need to add "servlet-api.jar" file in project build path.

form.html
---------
<!DOCTYPE html>
<html>
	<head>
		<title>MyPage!</title>
		
		<!--  add external javascript  -->
		<script type="text/javascript"  src="validation.js"></script>
		
	</head>
	<body>
		
		<form name="myForm" action="test" method="GET" onsubmit="return validate()">
			
			Name: <input type="text" name="t1"/> <br>
			Age : <input type="text" name="t2"/> <br>
			
			<!--  hiddex box field -->
			<input type="hidden" value="no" name="vflag"/>
			
			<input type="submit" value="submit"/>
		
		</form>
	
	</body>
</html>

validation.js
-------------
function validate()
{
	var name=document.myForm.t1.value;
	var age=document.myForm.t2.value;
	document.myForm.vflag.value="yes";
	
	if(name=="")
	{
		alert("Name is mandatory");
		document.myForm.t1.focus();
		return false;
	}
	if(age=="")
	{
		alert("Age is mandatory");
		document.myForm.t2.focus();
		return false;
	}
	else
	{
		if(isNaN(age))
		{
			alert("Age must be numeric");
			document.myForm.t2.value="";
			document.myForm.t2.focus();
			return false;
		}
	}
	
	
	
	
	return true;
}

web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>FormSrv</servlet-name>
  	<servlet-class>com.ihub.www.FormSrv</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>FormSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
</web-app>

FormSrv.java
------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class FormSrv extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//reading form data 
		String name=req.getParameter("t1");
		String sage=req.getParameter("t2");
		String status=req.getParameter("vflag");
		int age=0;
		
		if(status.equals("no"))
		{
			if(name=="" || name==null|| name.length()==0)
			{
				pw.println("<center>Name is mandatory</center>");
				return;
			}
			if(sage=="" || sage==null|| sage.length()==0)
			{
				pw.println("<center>Age is mandatory</center>");
				return;
			}
			else
			{
				try
				{
					age=Integer.parseInt(sage);
				}
				catch(NumberFormatException nfe)
				{
					pw.println("<center>Age must be numeric</center>");
					return;
				}
			}
		}
		
		if(status.equals("yes"))
		{
			age=Integer.parseInt(sage);
		}
		
		if(age<18)
			pw.println("<center><h1>U r not eligible to vote</h1></center>");
		else
			pw.println("<center><h1>U r eligible to vote</h1></center>");
		
		pw.close();
	}
}

Request url
----------
	http://localhost:2525/ValidationApp/

Servlet Filters
================
Filter is an object which is executed at the time of preprocessing and postprocessing of the request.

Diagram: servlet5.2

The main objective of Filter is to perform filtering task.

1) To count number of request coming to the application 

2) To perform form validation 

3) To perform encryption and decryption

and etc.

Like Servlet, Filter also having it own API called Filter API.


A javax.servlet package having three interfaces of Filter API.


1) Filter 

2) FilterChain 

3) FilterConfig 



1)Filter Interface
================
For creating any filter, we must and should implements the Filter interface.

Filter interface provides the following 3 life cycle methods for filter.


i)public void init(FilterConfig config)
----------------------------------
	
	IT is used to initialize the filter.
	It invokes only once .


ii)public void doFilter(HttpServletRequest req,HttpServletResponse res,FilterChain chain)
----------------------------------------------------------
	This method is invoked every time when user request to any resources to which
	the filter is mappend.

	IT is used to perform filtering task.	
	
iii)public void destroy()
---------------------------
	This method is invoked only once when filter is taken out of the service.


2)FilterChain
==============
It is responsible to invoke the next filter or resource in the chain.

FilterChain contains only one method.

i)public void doFilter(HttpServletRequest req,HttpServletResponse res)
------------------------------------
	It passes the control to the next filter or resource.

	
3)FilterConfig
===============
For every filter our servlet container creates FilterConfig object.
It is one per filter.


Deployment Directory Structure
-----------------------------
FilterApp
|
|---Java Resources
|	|
	|------src
		|
		|---com.ihub.www
			|
			|---MyFilter.java
			|---MyServlet.java
|---WebContent
|	|
	|------index.html 
	|------WEB-INF		
		|
		|---web.xml
Note:
---
In above application we need to add "servlet-api.jar" file in project build path.

index.html
-----------
<center>
	<h1>
		<a href="test"> Click Here </a>
	</h1>
</center>

web.xml
---------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <welcome-file-list>
  	<welcome-file>index.html</welcome-file>
  </welcome-file-list>
  
  <servlet>
  	<servlet-name>MyServlet</servlet-name>
  	<servlet-class>com.ihub.www.MyServlet</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>MyServlet</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  <filter>
  	<filter-name>MyFilter</filter-name>
  	<filter-class>com.ihub.www.MyFilter</filter-class>
  </filter>
  <filter-mapping>
  	<filter-name>MyFilter</filter-name>
  	<url-pattern>/test</url-pattern>
  </filter-mapping>
  
</web-app>

MyFilter.java
-----------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;

public class MyFilter implements Filter
{
	public void init(FilterConfig config)throws ServletException
	{
		
	}

	@Override
	public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)
			throws IOException, ServletException {
		
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		pw.println("<center>Filter Invoke Before</center><br>");
		chain.doFilter(req, res);
		pw.println("<center>Filter Invoke After</center><br>");
		
	}
	
	public void destroy()
	{
		
	}

}

MyServlet.java
-------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class MyServlet extends HttpServlet
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		pw.println("<center><h1>Servlet invoked</h1></center>");
	}
}

Request url
---------
	http://localhost:2525/FilterApp



















































































